#include "led.h"
#include "i2c.h"

LedDriverReg digit_to_reg(int digit) {
	digit &= 0x7;

	int base = static_cast<int>(LedDriverReg::Digit0);
	return static_cast<LedDriverReg>(base + digit);
}

void LedDriver::init() {
	// Digits 0-5 are the address and data bus, and should be decoded as hex.
	// Digit 6 is the status LEDs and should be raw.
	this->write(LedDriverReg::DecodeMode, 0b00111111);

	this->write(LedDriverReg::ScanLimit, 0x07);

	this->write(LedDriverReg::Shutdown, 0x01);

	this->write(LedDriverReg::Feature, 0x04);

	this->write(LedDriverReg::GlobalIntensity, 0x01);

	this->show_addr(0x1234);
	this->show_data(0xAB);
}

void LedDriver::show_addr(uint16_t addr) {
	for (int i = 0; i < 4; ++i) {
		auto reg = digit_to_reg(i);
		this->write(reg, addr >> 12);
		addr <<= 4;
	}
}

void LedDriver::show_data(uint8_t data) {
	for (int i = 0; i < 2; ++i) {
		auto reg = digit_to_reg(i + 4);
		this->write(reg, data >> 4);
		data <<= 4;
	}
}

void LedDriver::show_status(gpio::status_t status) {
	// From MSB to LSB:
	// (Old)
	// 0,  VPB, IRQB, NMIB, RESB, SYNC, RWB, PHI2
	//
	// (New)
	// 0, PHI2, NMIB, RESB, IRQB,  VPB, RWB, SYNC,   
	uint8_t data =
		(status.phi2() << 6) |
		(status.nmib() << 5) |
		(status.resb() << 4) |
		(status.irqb() << 3) |
		(status.vpb()  << 2) |
		(status.rwb()  << 1) |
		(status.sync() << 0);

	this->write(LedDriverReg::Digit6, data);
}

const static uint8_t KEYSCAN_PERMUTATION[256] = {
	0xFF, 0xF7, 0xFE, 0xF6, 0x7F, 0x77, 0x7E, 0x76, 0xBF, 0xB7, 0xBE, 0xB6, 0x3F, 0x37, 0x3E, 0x36,
	0xEF, 0xE7, 0xEE, 0xE6, 0x6F, 0x67, 0x6E, 0x66, 0xAF, 0xA7, 0xAE, 0xA6, 0x2F, 0x27, 0x2E, 0x26,
	0xDF, 0xD7, 0xDE, 0xD6, 0x5F, 0x57, 0x5E, 0x56, 0x9F, 0x97, 0x9E, 0x96, 0x1F, 0x17, 0x1E, 0x16,
	0xCF, 0xC7, 0xCE, 0xC6, 0x4F, 0x47, 0x4E, 0x46, 0x8F, 0x87, 0x8E, 0x86, 0x0F, 0x07, 0x0E, 0x06,
	0xFD, 0xF5, 0xFC, 0xF4, 0x7D, 0x75, 0x7C, 0x74, 0xBD, 0xB5, 0xBC, 0xB4, 0x3D, 0x35, 0x3C, 0x34,
	0xED, 0xE5, 0xEC, 0xE4, 0x6D, 0x65, 0x6C, 0x64, 0xAD, 0xA5, 0xAC, 0xA4, 0x2D, 0x25, 0x2C, 0x24,
	0xDD, 0xD5, 0xDC, 0xD4, 0x5D, 0x55, 0x5C, 0x54, 0x9D, 0x95, 0x9C, 0x94, 0x1D, 0x15, 0x1C, 0x14,
	0xCD, 0xC5, 0xCC, 0xC4, 0x4D, 0x45, 0x4C, 0x44, 0x8D, 0x85, 0x8C, 0x84, 0x0D, 0x05, 0x0C, 0x04,
	0xFB, 0xF3, 0xFA, 0xF2, 0x7B, 0x73, 0x7A, 0x72, 0xBB, 0xB3, 0xBA, 0xB2, 0x3B, 0x33, 0x3A, 0x32,
	0xEB, 0xE3, 0xEA, 0xE2, 0x6B, 0x63, 0x6A, 0x62, 0xAB, 0xA3, 0xAA, 0xA2, 0x2B, 0x23, 0x2A, 0x22,
	0xDB, 0xD3, 0xDA, 0xD2, 0x5B, 0x53, 0x5A, 0x52, 0x9B, 0x93, 0x9A, 0x92, 0x1B, 0x13, 0x1A, 0x12,
	0xCB, 0xC3, 0xCA, 0xC2, 0x4B, 0x43, 0x4A, 0x42, 0x8B, 0x83, 0x8A, 0x82, 0x0B, 0x03, 0x0A, 0x02,
	0xF9, 0xF1, 0xF8, 0xF0, 0x79, 0x71, 0x78, 0x70, 0xB9, 0xB1, 0xB8, 0xB0, 0x39, 0x31, 0x38, 0x30,
	0xE9, 0xE1, 0xE8, 0xE0, 0x69, 0x61, 0x68, 0x60, 0xA9, 0xA1, 0xA8, 0xA0, 0x29, 0x21, 0x28, 0x20,
	0xD9, 0xD1, 0xD8, 0xD0, 0x59, 0x51, 0x58, 0x50, 0x99, 0x91, 0x98, 0x90, 0x19, 0x11, 0x18, 0x10,
	0xC9, 0xC1, 0xC8, 0xC0, 0x49, 0x41, 0x48, 0x40, 0x89, 0x81, 0x88, 0x80, 0x09, 0x01, 0x08, 0x00
};

// The low half is the keys on the left,
// the high half are the keys on the right.
//
// E,  D,  B,  C,  G, DP,  A,  F
// 2,  3,  5,  4,  0,  7,  6,  1
uint16_t LedDriver::keyscan() {
	uint8_t lo = read(LedDriverReg::KeyA);
	uint8_t hi = read(LedDriverReg::KeyB);

	uint16_t lo_p = KEYSCAN_PERMUTATION[lo];
	uint16_t hi_p = KEYSCAN_PERMUTATION[hi];
	return ((hi_p << 8) | lo_p);
}

void LedDriver::write(LedDriverReg addr, uint8_t data) {
	uint8_t a = static_cast<uint8_t>(addr);

	i2c::Writer w { LED_ADDR };
	w.write(&a, 1);
	w.write(&data, 1);
}

uint8_t LedDriver::read(LedDriverReg addr) {
	uint8_t result;

	uint8_t a = static_cast<uint8_t>(addr);

	{
		i2c::Writer w { LED_ADDR };
		w.write(&a, 1);
	}

	{
		i2c::Reader r { LED_ADDR };
		r.read(&result, 1);
	}

	return result;
}